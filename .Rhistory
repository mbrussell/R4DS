}
mean.values(x)
x<-c(33,35,37)
mean.values <- function(x){
x<-mean((x))
x
}
mean.values(x)
?is.na
x<-c(33,35,37,NA)
mean.values <- function(x){
x<-mean(is.na(x))
x
}
mean.values(x)
# This code calculates the proportion of NA values in a vector.
x<-c(33,35,37,NA)
prop.na<- function(x){
x<-mean(is.na(x))
x
}
prop.na(x)
prop.na<- function(x){
x<- x / sum(x, na.rm=T)
x
}
prop.na(x=25)
x<-c(33,35,37, NA, NA)
prop.na<- function(x){
x<- x / sum(x, na.rm=T)
x
}
prop.na(x)
sum(x, na.rm=T)
33/105
# This code calculates the 0,1 proportion of each value in the data
x<-c(0,0,37, NA, NA)
prop.na<- function(x){
x<- x / sum(x, na.rm=T)
x
}
prop.na(x)
# This code calculates the 0,1 proportion of each value in the data
x<-c(0,1,37, NA, NA)
prop.na<- function(x){
x<- x / sum(x, na.rm=T)
x
}
prop.na(x)
# This code calculates the CV
x<-c(33,35,37, NA, NA)
cv<- function(x){
x <- sd(x, na.rm=T) / mean(x, na.rm=T)
x
}
cv(x)
x<-c(33,35,37, NA, NA)
x<-c(33,35,37, NA, NA)
var<- function(x){
var <- var(x, na.rm=T)
var
}
var(x)
x<-c(33,35,37, NA, NA)
var<- function(x){
var <- var(x)
var
}
var(x)
var<- function(x){
var2 <- var(x)
var2
}
var(x)
var(x)
x<-c(33,35,37, NA, NA)
x<-c(33,35,37)
var(x)
var2<- function(x){
v<- var(x)
v
}
var2(x)
x<-c(33,35,37)
var2<- function(x){
v<- var(x)
v
}
var2(x)
# 4.
x<-c(33,35,37)
var2<- function(x){
v<- var(x)
v
}
var2(x)
skewness <- function(x) {
n <- length(x)
v <- var(x)
m <- mean(x)
third.moment <- (1/(n - 2)) * sum((x - m)^3)
third.moment/(var(x)^(3/2))
}
skewness(x)
x<-c(33,35,389)
skewness <- function(x) {
n <- length(x)
v <- var(x)
m <- mean(x)
third.moment <- (1/(n - 2)) * sum((x - m)^3)
third.moment/(var(x)^(3/2))
}
skewness(x)
x<-c(33,35,NA)
y<-c(34,NA,87)
both_na<-function(x,y){
sum(is.na(x) & is.na(y))
}
both_na(x,y)
x<-c(33,NA,NA)
y<-c(34,NA,87)
both_na<-function(x,y){
sum(is.na(x) & is.na(y))
}
both_na(x,y)
is_directory <- function(x) file.info(x)$isdir
is_directory()
is_directory(x)
is_directory <- function(x) file.info(x)$isdir
is_directory(x)
is_directory <- function(x) file.info(x)$isdir
is_directory("x")
is_directory <- function(x) file.info(x)$isdir
is_directory("C://Users")
is_directory <- function(x) file.info(x)$isdir
is_directory("C://Users")
is_directory("C")
is_directory <- function(x) file.info(x)$isdir
is_directory("C://Users")
is_directory("C:")
is_directory <- function(x) file.info(x)$isdir
is_directory("C://Users")
is_directory("C://")
is_directory <- function(x) file.info(x)$isdir
is_directory("C://Users")
is_directory("F://")
is_readable <- function(x) file.access(x, 4) == 0
is_readable("C://Users")
?MASS::mvrnorm
?rnorm
rnorm(5, mean = 0, sd = 1)
rnorm(5, mean = 0, sd = 1)
MASS::mvrnorm(5)
MASS::mvrnorm(5, mean = 0, sd = 1)
rnorm(5, mean = 0, sd = 1)
MASS::mvrnorm(5, 0, 1)
?if
?`if`
library(lubridate)
now()
greeting<-function(time_now){
if(time_now < 12:00:00){
x <- "good morning!"
} else {
"good night!"
}
}
greeting(time_now=now())
greet <- function(time = lubridate::now()) {
hr <- lubridate::hour(time)
# I don't know what to do about times after midnight,
# are they evening or morning?
if (hr < 12) {
print("good morning")
} else if (hr < 17) {
print("good afternoon")
} else {
print("good evening")
}
}
greet()
fizzbuzz <- function(x) {
# these two lines check that x is a valid input
stopifnot(length(x) == 1)
stopifnot(is.numeric(x))
if (!(x %% 3) && !(x %% 5)) {
"fizzbuzz"
} else if (!(x %% 3)) {
"fizz"
} else if (!(x %% 5)) {
"buzz"
} else {
# ensure that the function returns a character vector
as.character(x)
}
}
fizzbuzz(6)
fizzbuzz(15)
fizzbuzz(15)
fizzbuzz(3)
fizzbuzz(15)
fizzbuzz(3)
fizzbuzz(5)
fizzbuzz(15)
fizzbuzz(3)
fizzbuzz(1)
switch(1, "apple", "banana", "cantaloupe")
x <- "e"
switch(x,
a = ,
b = "ab",
c = ,
d = "cd"
)
commas(letters, collapse = '-')
commas <- function(...) {
str_c(..., collapse = ", ")
}
commas(letters, collapse = '-')
?mean
x<-runif(10)
x<-runif(10)
mean(x)
mean(x,trim-0.3)
mean(x,trim=0.3)
?cor
sqrt(2)
sqrt(2)^2
x <- sqrt(2)^2
x
x-2
x-2
near(x-2)
library(tidyverse)
x <- sqrt(2)^2
x
x-2
near(x-2)
?near
near(x-2,2)
sqrt(2) ^ 2 == 2
near(sqrt(2) ^ 2, 2)
sqrt(2) ^ 2 == 2
x <- <- sqrt(2)^2
x <- sqrt(2)^2
is.finite(x)
x <- sqrt(2)^2
is.finite(x)
!is.infinte(x)
x <- sqrt(2)^2
is.finite(x)
!is.infinite(x)
dplyr::near()
dplyr::near
?integer
?double
x <- c(4, 5, 6)
x <- double(c(4, 5, 6))
x <- (c(4, 5, 6))
is.integer(x)
is.double(x)
x <- c(4, 5, 6)
is.double(x)
x2 <- round(x,1)
is.double(x)
x <- c(4, 5, 6)
x2 <- round(x,0)
is.double(x2)
x2 <- as.integer(x)
is.double(x2)
x3 <- int(x)
is.double(x3)
x3 <- floor(x)
is.double(x3)
x3 <- floor(x+0)
is.double(x3)
x
x3 <- trunc(x)
is.double(x3)
x <- c(4, 5, 6)
x2 <- as.integer(x)
is.double(x2)
x3 <- trunc(x)
is.double(x3)
parse_logical(c("true", "false"))
parse_integer(c("1", "2", "3"))
parse_double(c("1.56", "2.34", "3.56"))
x <- sample(20,100, replace = TRUE)
x
y <- x > 10
y <- x > 10
sum(y)
mean(y)
x <- sample(20,100, replace = TRUE)
x
y <- x > 10
sum(y)
mean(y)
x <- sample(20,100, replace = TRUE)
x
y <- x > 10
sum(y)
mean(y)
x <- sample(20,100, replace = TRUE)
x
y <- x > 10
sum(y)
mean(y)
x <- sample(20,100, replace = TRUE)
x
y <- x > 10
sum(y)
mean(y)
x <- sample(20,100, replace = TRUE)
x
y <- x > 10
sum(y)
mean(y)
x <- sample(20,100, replace = TRUE)
x
y <- x > 10
sum(y)
mean(y)
x <- sample(20,100, replace = TRUE)
x
y <- x > 10
sum(y)
mean(y)
x <- sample(20,100, replace = TRUE)
x
y <- x > 10
sum(y)
mean(y)
x <- sample(20,100, replace = TRUE)
x
y <- x > 10
sum(y)
mean(y)
x <- sample(20,100, replace = TRUE)
x
y <- x > 10
sum(y)
mean(y)
x <- sample(20,100, replace = TRUE)
x
y <- x > 10
sum(y)
mean(y)
x <- sample(20,100, replace = TRUE)
x
y <- x > 10
sum(y)
mean(y)
x <- sample(20,100, replace = TRUE)
x
y <- x > 10
sum(y)
mean(y)
x <- sample(20,100, replace = TRUE)
x
y <- x > 10
sum(y)
mean(y)
x <- sample(20,100, replace = TRUE)
x
y <- x > 10
sum(y)
mean(y)
x <- sample(20,100, replace = TRUE)
x
y <- x > 10
sum(y)
mean(y)
x <- sample(20,100, replace = TRUE)
x
y <- x > 10
sum(y)
mean(y)
x <- sample(20,100, replace = TRUE)
x
y <- x > 10
sum(y)
mean(y)
x <- sample(20,100, replace = TRUE)
x
y <- x > 10
sum(y)
mean(y)
x <- sample(20,100, replace = TRUE)
x
y <- x > 10
sum(y)
mean(y)
x <- sample(20,100, replace = TRUE)
x
y <- x > 10
sum(y)
mean(y)
x <- sample(20,100, replace = TRUE)
x
y <- x > 10
sum(y)
mean(y)
x <- sample(20,100, replace = TRUE)
x
y <- x > 10
sum(y)
mean(y)
x <- sample(20,100, replace = TRUE)
x
y <- x > 10
sum(y)
mean(y)
x <- sample(20,100, replace = TRUE)
x
y <- x > 10
sum(y)
mean(y)
typeof(1)
typeof(1L)
typeof("Mets")
typeof(c(1986, "Mets"))
is_integer(x)
is_double(x)
is_character(x)
# 1.
x <- c(1,2,3,4)
x <- c(1,2,3,4)
mean(is.na(x))
x <- c(1,2,3,4)
x2 <- c(1,2,NA,4)
mean(is.na(x))
mean(us.na(x2))
x <- c(1,2,3,4)
x2 <- c(1,2,NA,4)
mean(is.na(x))
mean(is.na(x2))
sum(!is.finite(x))
sum(!is.finite(x2))
sum(!is.finite(x))
sum(!is.finite(x2))
sum(!is.finite(x3))
x3 <- c(1,2,NA,NA)
mean(is.na(x))
mean(is.na(x2))
sum(!is.finite(x))
sum(!is.finite(x2))
sum(!is.finite(x3))
?is.vector
?is.atomic
?setNames
?purrr::set_names
setNames(1:4, c("a", "b", "c", "d"))
purrr::set_names(1:4, "a", "b", "c", "d")
purrr::set_names(c(a = 1, b = 2, c = 3, d = 4), ~ toupper(.))
purrr::set_names(c(a = 1, b = 2, c = 3, d = 4), ~ toupper(.))
purrr::set_names(c(A = 1, B = 2, C = 3, D = 4), ~ tolower(.))
x <- c(1,9,8,6)
x <- c(1,9,8,6)
x[length(x)]
x[%%2]
x[x %% 2]
x <- c(1,9,8,6)
x[length(x)]
# 5.
x[x %% 2]
x[x %% 2 == 0]
x
# 5.
x[seq_along(x) %% 2 == 0]
# 4.3
x[!length(x)]
# 4.3
x[1:length(x)]
# 4.3
x[1:length(x)-1]
x <- c(1,9,8,6, NA, NA)
x[seq_along(x) %% 2 == 0]
x[seq_along(x) %% 2 == 0 !is.na()]
x[seq_along(x) %% 2 == 0 !is.na(x)]
x[seq_along(x) %% 2 == 0 & is.nan(x)]
x[x %% 2 == 0 & is.nan(x)]
x[!is.infinite(x) & !is.nan(x) & (x %% 2 == 0)]
x <- c(1,9,8,6, NA, NA)
x[!is.infinite(x) & !is.nan(x) & (x %% 2 == 0)]
x[x <= 0]
x[-which(x > 0)]
x <- c(a = 10, b = 20)
x
x[3]
# When [ is provided names not in the vectorâ€™s names, it will return NA for those elements.
x["c"]
x <- tibble(x = c(4,5,6), y = c(6,5,4))
library(tidyverse)
# 1. Draw the lists as nested sets.
# 2.
x <- tibble(x = c(4,5,6), y = c(6,5,4))
x
x <- tibble(x = c(4,5,6), y = c(6,5,4))
x[["x"]]
x <- tibble(x = c(4,5,6), y = c(6,5,4))
x[["x"]]
x["x"]
hms::hms(3600)
attributes(hms::hms(3600))
x <- tibble(x = c(4,5,6), y = c(6,5))
# 2.
x <- tibble(x = c(4,5,6), y = c(6,5))
x
# 2.
x2 <- tibble(x = c(4,5,6), y = c(6,5))
x2
